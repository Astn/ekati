// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NodeID : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NodeID GetRootAsNodeID(ByteBuffer _bb) { return GetRootAsNodeID(_bb, new NodeID()); }
  public static NodeID GetRootAsNodeID(ByteBuffer _bb, NodeID obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NodeID __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Remote { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRemoteBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetRemoteBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetRemoteArray() { return __p.__vector_as_array<byte>(4); }
  public string Iri { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIriBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIriBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIriArray() { return __p.__vector_as_array<byte>(6); }
  public Ekati.Core.MemoryPointer? Pointer { get { int o = __p.__offset(8); return o != 0 ? (Ekati.Core.MemoryPointer?)(new Ekati.Core.MemoryPointer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Ekati.Core.NodeID> CreateNodeID(FlatBufferBuilder builder,
      StringOffset remoteOffset = default(StringOffset),
      StringOffset iriOffset = default(StringOffset),
      Offset<Ekati.Core.MemoryPointer> pointerOffset = default(Offset<Ekati.Core.MemoryPointer>)) {
    builder.StartTable(3);
    NodeID.AddPointer(builder, pointerOffset);
    NodeID.AddIri(builder, iriOffset);
    NodeID.AddRemote(builder, remoteOffset);
    return NodeID.EndNodeID(builder);
  }

  public static void StartNodeID(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddRemote(FlatBufferBuilder builder, StringOffset remoteOffset) { builder.AddOffset(0, remoteOffset.Value, 0); }
  public static void AddIri(FlatBufferBuilder builder, StringOffset iriOffset) { builder.AddOffset(1, iriOffset.Value, 0); }
  public static void AddPointer(FlatBufferBuilder builder, Offset<Ekati.Core.MemoryPointer> pointerOffset) { builder.AddOffset(2, pointerOffset.Value, 0); }
  public static Offset<Ekati.Core.NodeID> EndNodeID(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.NodeID>(o);
  }
};


}
