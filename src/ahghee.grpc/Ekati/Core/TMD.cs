// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TMD : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TMD GetRootAsTMD(ByteBuffer _bb) { return GetRootAsTMD(_bb, new TMD()); }
  public static TMD GetRootAsTMD(ByteBuffer _bb, TMD obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TMD __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ekati.Core.Data? MetaData { get { int o = __p.__offset(4); return o != 0 ? (Ekati.Core.Data?)(new Ekati.Core.Data()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Ekati.Core.Data? Data { get { int o = __p.__offset(6); return o != 0 ? (Ekati.Core.Data?)(new Ekati.Core.Data()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Ekati.Core.TMD> CreateTMD(FlatBufferBuilder builder,
      Offset<Ekati.Core.Data> metaDataOffset = default(Offset<Ekati.Core.Data>),
      Offset<Ekati.Core.Data> dataOffset = default(Offset<Ekati.Core.Data>)) {
    builder.StartTable(2);
    TMD.AddData(builder, dataOffset);
    TMD.AddMetaData(builder, metaDataOffset);
    return TMD.EndTMD(builder);
  }

  public static void StartTMD(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddMetaData(FlatBufferBuilder builder, Offset<Ekati.Core.Data> metaDataOffset) { builder.AddOffset(0, metaDataOffset.Value, 0); }
  public static void AddData(FlatBufferBuilder builder, Offset<Ekati.Core.Data> dataOffset) { builder.AddOffset(1, dataOffset.Value, 0); }
  public static Offset<Ekati.Core.TMD> EndTMD(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.TMD>(o);
  }
};


}
