// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Node : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Node GetRootAsNode(ByteBuffer _bb) { return GetRootAsNode(_bb, new Node()); }
  public static Node GetRootAsNode(ByteBuffer _bb, Node obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Node __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ekati.Core.NodeID? Id { get { int o = __p.__offset(4); return o != 0 ? (Ekati.Core.NodeID?)(new Ekati.Core.NodeID()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Ekati.Core.Map? Attributes { get { int o = __p.__offset(6); return o != 0 ? (Ekati.Core.Map?)(new Ekati.Core.Map()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Ekati.Core.Node> CreateNode(FlatBufferBuilder builder,
      Offset<Ekati.Core.NodeID> idOffset = default(Offset<Ekati.Core.NodeID>),
      Offset<Ekati.Core.Map> attributesOffset = default(Offset<Ekati.Core.Map>)) {
    builder.StartTable(2);
    Node.AddAttributes(builder, attributesOffset);
    Node.AddId(builder, idOffset);
    return Node.EndNode(builder);
  }

  public static void StartNode(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, Offset<Ekati.Core.NodeID> idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddAttributes(FlatBufferBuilder builder, Offset<Ekati.Core.Map> attributesOffset) { builder.AddOffset(1, attributesOffset.Value, 0); }
  public static Offset<Ekati.Core.Node> EndNode(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.Node>(o);
  }
  public static void FinishNodeBuffer(FlatBufferBuilder builder, Offset<Ekati.Core.Node> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedNodeBuffer(FlatBufferBuilder builder, Offset<Ekati.Core.Node> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
