// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TypeBytes : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TypeBytes GetRootAsTypeBytes(ByteBuffer _bb) { return GetRootAsTypeBytes(_bb, new TypeBytes()); }
  public static TypeBytes GetRootAsTypeBytes(ByteBuffer _bb, TypeBytes obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TypeBytes __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Typeiri { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTypeiriBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTypeiriBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTypeiriArray() { return __p.__vector_as_array<byte>(4); }
  public byte ByteArray(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ByteArrayLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetByteArrayBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetByteArrayBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetByteArrayArray() { return __p.__vector_as_array<byte>(6); }
  public Ekati.Core.MemoryPointer? Pointer { get { int o = __p.__offset(8); return o != 0 ? (Ekati.Core.MemoryPointer?)(new Ekati.Core.MemoryPointer()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Ekati.Core.TypeBytes> CreateTypeBytes(FlatBufferBuilder builder,
      StringOffset typeiriOffset = default(StringOffset),
      VectorOffset byteArrayOffset = default(VectorOffset),
      Offset<Ekati.Core.MemoryPointer> pointerOffset = default(Offset<Ekati.Core.MemoryPointer>)) {
    builder.StartTable(3);
    TypeBytes.AddPointer(builder, pointerOffset);
    TypeBytes.AddByteArray(builder, byteArrayOffset);
    TypeBytes.AddTypeiri(builder, typeiriOffset);
    return TypeBytes.EndTypeBytes(builder);
  }

  public static void StartTypeBytes(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTypeiri(FlatBufferBuilder builder, StringOffset typeiriOffset) { builder.AddOffset(0, typeiriOffset.Value, 0); }
  public static void AddByteArray(FlatBufferBuilder builder, VectorOffset byteArrayOffset) { builder.AddOffset(1, byteArrayOffset.Value, 0); }
  public static VectorOffset CreateByteArrayVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateByteArrayVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartByteArrayVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPointer(FlatBufferBuilder builder, Offset<Ekati.Core.MemoryPointer> pointerOffset) { builder.AddOffset(2, pointerOffset.Value, 0); }
  public static Offset<Ekati.Core.TypeBytes> EndTypeBytes(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.TypeBytes>(o);
  }
};


}
