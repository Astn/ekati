// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Data : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Data GetRootAsData(ByteBuffer _bb) { return GetRootAsData(_bb, new Data()); }
  public static Data GetRootAsData(ByteBuffer _bb, Data obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ekati.Core.DataBlock ItemType { get { int o = __p.__offset(4); return o != 0 ? (Ekati.Core.DataBlock)__p.bb.Get(o + __p.bb_pos) : Ekati.Core.DataBlock.NONE; } }
  public TTable? Item<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o + __p.bb_pos) : null; }

  public static Offset<Ekati.Core.Data> CreateData(FlatBufferBuilder builder,
      Ekati.Core.DataBlock item_type = Ekati.Core.DataBlock.NONE,
      int itemOffset = 0) {
    builder.StartTable(2);
    Data.AddItem(builder, itemOffset);
    Data.AddItemType(builder, item_type);
    return Data.EndData(builder);
  }

  public static void StartData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddItemType(FlatBufferBuilder builder, Ekati.Core.DataBlock itemType) { builder.AddByte(0, (byte)itemType, 0); }
  public static void AddItem(FlatBufferBuilder builder, int itemOffset) { builder.AddOffset(1, itemOffset, 0); }
  public static Offset<Ekati.Core.Data> EndData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.Data>(o);
  }
};


}
