// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Primitive : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Primitive GetRootAsPrimitive(ByteBuffer _bb) { return GetRootAsPrimitive(_bb, new Primitive()); }
  public static Primitive GetRootAsPrimitive(ByteBuffer _bb, Primitive obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Primitive __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Ekati.Core.PrimitiveType _type { get { int o = __p.__offset(4); return o != 0 ? (Ekati.Core.PrimitiveType)__p.bb.GetSbyte(o + __p.bb_pos) : Ekati.Core.PrimitiveType.boolean; } }
  public bool Boolean { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string Str { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStrBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStrBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStrArray() { return __p.__vector_as_array<byte>(8); }
  public sbyte I8 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public short I16 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public int I32 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public long I64 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public byte Ui8 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public ushort Ui16 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public uint Ui32 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public ulong Ui64 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public float F { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float F32 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public double F64 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }

  public static Offset<Ekati.Core.Primitive> CreatePrimitive(FlatBufferBuilder builder,
      Ekati.Core.PrimitiveType _type = Ekati.Core.PrimitiveType.boolean,
      bool boolean = false,
      StringOffset strOffset = default(StringOffset),
      sbyte i8 = 0,
      short i16 = 0,
      int i32 = 0,
      long i64 = 0,
      byte ui8 = 0,
      ushort ui16 = 0,
      uint ui32 = 0,
      ulong ui64 = 0,
      float f = 0.0f,
      float f32 = 0.0f,
      double f64 = 0.0) {
    builder.StartTable(14);
    Primitive.AddF64(builder, f64);
    Primitive.AddUi64(builder, ui64);
    Primitive.AddI64(builder, i64);
    Primitive.AddF32(builder, f32);
    Primitive.AddF(builder, f);
    Primitive.AddUi32(builder, ui32);
    Primitive.AddI32(builder, i32);
    Primitive.AddStr(builder, strOffset);
    Primitive.AddUi16(builder, ui16);
    Primitive.AddI16(builder, i16);
    Primitive.AddUi8(builder, ui8);
    Primitive.AddI8(builder, i8);
    Primitive.AddBoolean(builder, boolean);
    Primitive.Add_type(builder, _type);
    return Primitive.EndPrimitive(builder);
  }

  public static void StartPrimitive(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void Add_type(FlatBufferBuilder builder, Ekati.Core.PrimitiveType Type) { builder.AddSbyte(0, (sbyte)Type, 0); }
  public static void AddBoolean(FlatBufferBuilder builder, bool boolean) { builder.AddBool(1, boolean, false); }
  public static void AddStr(FlatBufferBuilder builder, StringOffset strOffset) { builder.AddOffset(2, strOffset.Value, 0); }
  public static void AddI8(FlatBufferBuilder builder, sbyte i8) { builder.AddSbyte(3, i8, 0); }
  public static void AddI16(FlatBufferBuilder builder, short i16) { builder.AddShort(4, i16, 0); }
  public static void AddI32(FlatBufferBuilder builder, int i32) { builder.AddInt(5, i32, 0); }
  public static void AddI64(FlatBufferBuilder builder, long i64) { builder.AddLong(6, i64, 0); }
  public static void AddUi8(FlatBufferBuilder builder, byte ui8) { builder.AddByte(7, ui8, 0); }
  public static void AddUi16(FlatBufferBuilder builder, ushort ui16) { builder.AddUshort(8, ui16, 0); }
  public static void AddUi32(FlatBufferBuilder builder, uint ui32) { builder.AddUint(9, ui32, 0); }
  public static void AddUi64(FlatBufferBuilder builder, ulong ui64) { builder.AddUlong(10, ui64, 0); }
  public static void AddF(FlatBufferBuilder builder, float f) { builder.AddFloat(11, f, 0.0f); }
  public static void AddF32(FlatBufferBuilder builder, float f32) { builder.AddFloat(12, f32, 0.0f); }
  public static void AddF64(FlatBufferBuilder builder, double f64) { builder.AddDouble(13, f64, 0.0); }
  public static Offset<Ekati.Core.Primitive> EndPrimitive(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.Primitive>(o);
  }
};


}
