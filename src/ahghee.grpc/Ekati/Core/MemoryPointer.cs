// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct MemoryPointer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MemoryPointer GetRootAsMemoryPointer(ByteBuffer _bb) { return GetRootAsMemoryPointer(_bb, new MemoryPointer()); }
  public static MemoryPointer GetRootAsMemoryPointer(ByteBuffer _bb, MemoryPointer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MemoryPointer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Partitionkey { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Filename { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Offset { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Length { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<Ekati.Core.MemoryPointer> CreateMemoryPointer(FlatBufferBuilder builder,
      int partitionkey = 0,
      int filename = 0,
      int offset = 0,
      int length = 0) {
    builder.StartTable(4);
    MemoryPointer.AddLength(builder, length);
    MemoryPointer.AddOffset(builder, offset);
    MemoryPointer.AddFilename(builder, filename);
    MemoryPointer.AddPartitionkey(builder, partitionkey);
    return MemoryPointer.EndMemoryPointer(builder);
  }

  public static void StartMemoryPointer(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPartitionkey(FlatBufferBuilder builder, int partitionkey) { builder.AddInt(0, partitionkey, 0); }
  public static void AddFilename(FlatBufferBuilder builder, int filename) { builder.AddInt(1, filename, 0); }
  public static void AddOffset(FlatBufferBuilder builder, int offset) { builder.AddInt(2, offset, 0); }
  public static void AddLength(FlatBufferBuilder builder, int length) { builder.AddInt(3, length, 0); }
  public static Offset<Ekati.Core.MemoryPointer> EndMemoryPointer(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.MemoryPointer>(o);
  }
};


}
