// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Ekati.Core
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct KeyValue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static KeyValue GetRootAsKeyValue(ByteBuffer _bb) { return GetRootAsKeyValue(_bb, new KeyValue()); }
  public static KeyValue GetRootAsKeyValue(ByteBuffer _bb, KeyValue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public KeyValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Timestamp { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public Ekati.Core.TMD? Key { get { int o = __p.__offset(6); return o != 0 ? (Ekati.Core.TMD?)(new Ekati.Core.TMD()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Ekati.Core.TMD? Value { get { int o = __p.__offset(8); return o != 0 ? (Ekati.Core.TMD?)(new Ekati.Core.TMD()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Ekati.Core.KeyValue> CreateKeyValue(FlatBufferBuilder builder,
      long timestamp = 0,
      Offset<Ekati.Core.TMD> keyOffset = default(Offset<Ekati.Core.TMD>),
      Offset<Ekati.Core.TMD> valueOffset = default(Offset<Ekati.Core.TMD>)) {
    builder.StartTable(3);
    KeyValue.AddTimestamp(builder, timestamp);
    KeyValue.AddValue(builder, valueOffset);
    KeyValue.AddKey(builder, keyOffset);
    return KeyValue.EndKeyValue(builder);
  }

  public static void StartKeyValue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTimestamp(FlatBufferBuilder builder, long timestamp) { builder.AddLong(0, timestamp, 0); }
  public static void AddKey(FlatBufferBuilder builder, Offset<Ekati.Core.TMD> keyOffset) { builder.AddOffset(1, keyOffset.Value, 0); }
  public static void AddValue(FlatBufferBuilder builder, Offset<Ekati.Core.TMD> valueOffset) { builder.AddOffset(2, valueOffset.Value, 0); }
  public static Offset<Ekati.Core.KeyValue> EndKeyValue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Ekati.Core.KeyValue>(o);
  }
};


}
