@page "/query"

@using System.IO
@using Ekati.Protocol.Grpc
@using Microsoft.Extensions.Logging
@using Ekati.Core
@using Ekati.Ext
@using Grpc.Core.Utils
@using Microsoft.AspNetCore.Components.Rendering
@inject Ekati.Protocol.Grpc.WatDbService.WatDbServiceClient wat
@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject ILogger<Query> Logger


<div>
    <h3 style="display: inline; padding-right: 5%;">Query</h3>
    <button @onclick="@((o) => { this.RunScript(); })">Run Script</button>
    <button @onclick="@((o) => { this.Clear(); })">Clear</button>
</div>
<div style="display: table; clear: both;">
    <div style="width: 40%; height: 500px; float: left;">
        <div id="monaco_container" style="width: 100%; height: 100%;"></div>

    </div>
    <div style="float: right; width: 60%; height: 100%; overflow: hidden; background-color: black; ">
        <Graph Nodes="@Nodes"></Graph>
    </div>
    <div style="clear: left; width: 40%;">
       <ul style="max-height: 30%; overflow-y: scroll; overflow-x: hidden;">
           @foreach (var pi in ProgressItems)
           {
               var myPI = pi;
               <li >
                   <button @onclick="@(() => { ProgressItems.Remove(myPI);})">X</button>
                   (@myPI.Count / @myPI.OfTotal) - @myPI.Message
               </li>
           }
       </ul>
       <div style="clear: left; background-color: #3b3a39; height: 20%">
              Stuff here?
       </div>  
    </div>
</div>
<div style="padding: 5px;">
    
        @if (Nodes.Any())
        {
            var headers = (from node in Nodes.Skip(skip).Take(take)
                from attr in node.Attributes.Value.AsEnumerable()
                let keyD = attr.Key.Value.Data.Value.ToDisplayString()
                select (keyD)).OrderBy(x=> x).Distinct().ToList();
            
            <table>
                <thead>
                <tr>
                    <th>id</th>
                    @foreach (var h in headers)
                    {
                        <th>@h</th>
                    }
                </tr>
                </thead>
                <tbody>
                @{
                    foreach (var n in Nodes.Skip(skip).Take(take))
                    {
                        <tr>
                            <td>@n.Id.Value.Iri</td>
                            @foreach (var h in headers)
                            {
                                var vals = n.Attributes.Value.AsEnumerable().Where(a => a.Key.Value.Data.Value.ToDisplayString() == h).ToList();
                                if (!vals.Any())
                                {
                                    <td></td>
                                }
                                else
                                {
                                    <td>

                                        @if (vals.Count == 1)
                                        {
                                            <span>@vals[0].Value.Value.Data.Value.ToDisplayString()</span>
                                        }
                                        else
                                        {
                                            <ul>
                                                @foreach (var a in vals.Take(3))
                                                {
                                                    //var key = a.Key.Data.ToDisplayString();
                                                    var val = a.Value.Value.Data.Value.ToDisplayString().Replace("\\u", "&#");
                                                    <li>@val</li>
                                                }
                                                @if (vals.Count > 3)
                                                {
                                                    <li>...</li>
                                                }
                                            </ul>
                                        }
                                    </td>
                                }
                            }
                        </tr>
                    }
                }
                </tbody>
            </table>     
        }
</div>  

@code {

    bool isInitializing;
    public bool IsInitialized;
    public int IsLoading;
    public List<Node> Nodes { get; set; }
    int skip = 0;
    int take = 10;
    int took = 0;
    int Limit = 1000;
    List<ProgressItem> ProgressItems { get; set; } = new List<ProgressItem>();
    internal class ProgressItem
    {
        public string Message { get; set; }
        public long Count { get; set; }
        public long OfTotal { get; set; }
        public bool InProgress { get; set; }
    }

    private void OnDismiss(ProgressItem pi)
    {
        ProgressItems.Remove(pi);
        this.StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        Nodes = new List<Node>();
    }



    private async Task Clear()
    {
        took = 0;
        this.Nodes.Clear();
        this.StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (IsInitialized || isInitializing)
            return;

        isInitializing = true;

        var text = @"




// c style comments - highlight and ctrl+/ or command+/
// load graphml ""https://raw.githubusercontent.com/Astn/ekati/master/src/core/tinkerpop-modern.xml""

// you can find lots of 'nt' data to download from wikidata https://www.wikidata.org/wiki/Special:EntityData
// load nt ""https://www.wikidata.org/wiki/Special:EntityData/Q23.nt""

// multi-line comments also supported

/* 
get ""*"" 
	|> limit 500
    |> follow * 1
       |> limit 500
       |> fields (( ^:^ , *:^ ) - ( ""age"":* , ""bio"":*)) + ^""asdfasfda"":string
       |> follow * 1
       |> limit 500
*/

// put some data in
// put ""your/wonderful/id"" 
//     ""key"":""value"",
//     ""key2"":""value2"",
//     ""linkname"":^""someid"",
//     ""anotherlink"":^""anotherid"";

//     ""someid""
//         ""likes"":^""your/wonderful/id"",
//         ""doesnt/like"":^""anotherid"";

//     ""anotherid""
//         ""name"":""whatever you like"",
//         ""follows"":^""1"";  

// get it back out
// get ""your/wonderful/id"" 
// 	|> follow * 3

";

        try
        {
            text = await JsRuntime.InvokeAsync<string>("CreateMonacoEditor", DotNetObjectReference.Create(this), text);
        }
        catch (Exception e)
        {
            Logger.LogError("Something with monaco", e);
            text = null;
        }

        this.Source = await JS_GetSourceAsync();
        StateHasChanged();

        IsInitialized = true;
        StateHasChanged();
    }

    public string Source { get; set; }

    [JSInvokable]
    public async Task<string> JS_OnContentChanged()
    {
        this.Source = await JS_GetSourceAsync();

        return "occ";
    }

    public async Task<string> JS_GetSourceAsync()
    {
        try
        {
            var source = await JsRuntime.InvokeAsync<string>("GetMonacoEditorContent", new object[] {});
            //DebugText = $"{counterSource++} Source:{source}";
            return source;
        }
        catch (Exception e)
        {
            Logger.LogError(e, "2something with monaco");
            return string.Empty;
        }
    }

    private async Task RunScript()
    {
        await JS_OnContentChanged();
        ProgressItems.Clear();
        var request = new Ekati.Protocol.Grpc.QueryRequest();
        request.QueryText = await JS_GetSourceAsync();
        var responseNodes = wat.Query(request);
        var scriptStatus = new ProgressItem
        {
            Message = "Running Script",
            Count = 0,
            InProgress = true
        };
        ProgressItems.Add(scriptStatus);
        Lazy<ProgressItem> getNodesStatus = new Lazy<ProgressItem>(() =>
        {
            var pi = new ProgressItem
            {
                Message = "Loading Nodes",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            return pi;
        });
        Lazy<ProgressItem> insertStatus = new Lazy<ProgressItem>(() =>
        {
            var pi = new ProgressItem
            {
                Message = "Putting Data",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            return pi;
        });
        Lazy<ProgressItem> loadFileStatus = new Lazy<ProgressItem>(() =>
        {
            var pi = new ProgressItem
            {
                Message = "Loading File",
                Count = 0,
                InProgress = true
            };
            ProgressItems.Add(pi);
            return pi;
        });
        await responseNodes.ResponseStream.ForEachAsync(async n =>
        {
            scriptStatus.Count++;
            this.StateHasChanged();
            if (n.MessageCase == QueryResponse.MessageOneofCase.Node)
            {
                Console.WriteLine("Got Node - {0}", n.Node.FlatBuffer.ToBase64());
                var sizedArray = n.Node.FlatBuffer.ToByteArray();
                var node = Node.GetRootAsNode(new FlatBuffers.ByteBuffer(sizedArray));
                Nodes.Add(node);
                getNodesStatus.Value.Count++;
            }else if (n.MessageCase == QueryResponse.MessageOneofCase.PutResponse)
            {
                insertStatus.Value.Count += n.PutResponse.Success ? 1 : 0;
            }else if (n.MessageCase == QueryResponse.MessageOneofCase.LoadFileResponse)
            {
                loadFileStatus.Value.Count = n.LoadFileResponse.Progress;
                loadFileStatus.Value.OfTotal = n.LoadFileResponse.Length;
            }
            this.StateHasChanged();
        });
        scriptStatus.InProgress = false;
        this.StateHasChanged();
    }
}