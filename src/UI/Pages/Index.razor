@page "/"
@using System.Diagnostics
@using System.IO
@using Ekati.Protocol.Grpc
@using ChartJs.Blazor.ChartJS
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Enums
@using ChartJs.Blazor.ChartJS.Common.Handlers
@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.LineChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.ChartJS.Common.Time
@using ChartJs.Blazor.Util
@using Google.Protobuf.WellKnownTypes
@inject IJSRuntime JsRuntime;
@inject Ekati.Protocol.Grpc.WatDbService.WatDbServiceClient wat

<h1>Ekati</h1>

Welcome to your new database.
<div style="display: flex; flex-wrap: wrap;">
@foreach (var __chart in Charts)
{
    var chart = __chart;
    <div style="margin: 2px;">
        <h4>@chart.Value.Id</h4>
        <svg id="@chart.Value.Id" viewBox="0 0 600 300" width="600" height="300"></svg>    
    </div>
}
</div>

@code{
    const string DeCh = "en-us";
    private bool _renderedOnce = false;
    
    public Dictionary<string,ChartStuff> Charts { get; set; } = new Dictionary<string,ChartStuff>();

    public class Measure
    {
        public string Time { get; set; }
        public float Value { get; set; }

        public void SetTime(DateTime dt)
        {
            Time = dt.ToString("o");
        }

        public Measure(DateTime time, float value)
        {
            SetTime(time);
            Value = value;
        }
    }
    public class ChartStuff
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public List<Measure> Dataset { get; set; } = new List<Measure>();
        public ChartStuff(string title, string yaxis, string xaxis)
        {
            Title = title;
            Id = title.Split('|').First();
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        loadData();
    }

    static LineDataset<TimeTuple<float>> MakeDataSet(string label)
    {
        return new LineDataset<TimeTuple<float>>
        {
            BackgroundColor = ColorUtil.RandomColorString(),
            BorderColor = ColorUtil.RandomColorString(),
            Label = label,
            Fill = false,
            BorderWidth = 2,
            PointRadius = 3,
            PointBorderWidth = 1,
            SteppedLine = SteppedLine.False
        };
    }
    async Task loadData()
    {
        var refreshDelay = 1000;
        var start = Stopwatch.StartNew();
        var iteration = 0;
        while(true)
        {
            var foo = await wat.GetMetricsAsync(new GetMetricsRequest());
            start.Restart();
            var anyAdded = false;
            foreach (var metric in foo.Metrics)
            {
                if (Charts.ContainsKey(metric.Name) == false)
                {
                    Charts.Add(metric.Name, new ChartStuff(metric.Name, "", ""));
                    // dont await this.
                    if (anyAdded == false)
                    {
                        _renderedOnce = false;
                        anyAdded = true;
                    }
                }
                var c = Charts[metric.Name];
                var tt = new Measure(metric.Time.ToDateTime(), metric.Value / 1024 / 1024);
                c.Dataset.Add(tt);
                
            }
            if (anyAdded)
            {
                StateHasChanged();
            }
            // gotta make sure we got some svg goodness.
            if (_renderedOnce)
            {
                var multiChartsData = Charts.Values.ToList();
                await JsRuntime.InvokeVoidAsync("d3Charts.updateCharts", multiChartsData);
            }
            await Task.Delay(Math.Abs(refreshDelay - (int)start.ElapsedMilliseconds));
            iteration++;
        }
        
       
        
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _renderedOnce = true;
    }
}